###JavaScript Zoo

##Objectives

You will learn to:

Connect a local JavaScript file within your HTML.
Use document.querySelector to access DOM nodes in your JavaScript.
Use .addEventListener to add click events to your HTML elements.
Use .innerHTML to modify content on your page in response to user interactions.

##Starting HTML

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Welcome to the Zoo!</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.1/css/bulma.min.css">
  <link rel="stylesheet" href="style.css" type="text/css">
</head>

<body>
  <section class="hero is-small is-dark has-text-centered">
    <div class="hero-body">
      <p class="title">
        Petting Zoo!
      </p>
      <p class="subtitle">
        Welcome to the world's first digital petting zoo!
      </p>
    </div>
  </section>
  <div class="container">

    <section class="section">
      <h1 class="title">Tippy the Baby Goat</h1>
      <h2 class="subtitle">
        Tippy the baby goat walks right up to you and bonks his head against your legs. It looks like he wants to be
        pet!
      </h2>
      <figure class="image">
        <img src="https://i1.wp.com/packgoats.com/wp-content/uploads/2019/11/babygoat.jpeg?fit=1800%2C1350&ssl=1"
          alt="a cream-colored baby goat" />
      </figure>
      <p id="status1">He may bleat, but he won't bite!</p>
      <div class="mt-4">
        <button id="button1" class="button is-large">Click to pet the baby goat</button>
      </div>
    </section>
    <section class="section">
      <h1 class="title">Brodie the Bunny</h1>
      <h2 class="subtitle">
        Brodie the bunny loves gentle pets on the head! Go ahead and give him a little pet.
      </h2>
      <figure class="image">
        <img src="https://www.rd.com/wp-content/uploads/2020/04/GettyImages-694542042-e1586274805503.jpg"
          alt="close-up of small white bunny" />
      </figure>
      <p id="status2">Brodie is really quiet. He probably won't say much.</p>
      <div class="mt-4">
        <button id="button2" class="button is-large">Click to pet the bunny</button>
      </div>
    </section>
    <section class="section">
      <h1 class="title">Coco the Mama Goat</h1>
      <h2 class="subtitle">
        Coco is Tippy's mother! She loves carrots. Would you like to feed her one?
      </h2>
      <figure class="image">
        <img src="https://5.imimg.com/data5/PG/YS/MY-27909549/boer-female-goat-500x500.jpg"
          alt="white and brown female goat" />
      </figure>
      <p id="status3">Coco has had 2 carrots today.</p>
      <div class="mt-4">
        <button id="button3" class="button is-large">Click to feed the mama goat</button>
      </div>
    </section>
    <section class="section">
      <h1 class="title">Arno the Alligator</h1>
      <h2 class="subtitle">
        Please do not pet the alligator! He's not part of the petting zoo.
      </h2>
      <figure class="image">
        <img
          src="https://static01.nyt.com/images/2020/01/21/science/17TB-ALLIGATORCARCASS02/17TB-ALLIGATORCARCASS02-videoSixteenByNineJumbo1600.jpg"
          alt="alligator on a small pile of rocks in a lake" />
      </figure>
      <p>Please just look.</p>
      <p id="status3">No Touching!</p>
      <div class="mt-4">
        <button id="button4" class="button is-large is-danger">Pet the alligator anyways</button>
      </div>
    </section>
  </div>
  <script src="" type="text/javascript" defer></script>
</body>

</html>

##Starting CSS

img {
  max-width: 400px;
}

##Starting JavaScript

console.log("script running!");

const button1 = document.querySelector("#button1");

##Instructions

Open the starter code.

Open your web browser inspector and study the HTML. Use the “select an element” tool and observe that you can use it to click on an element in the browser to see the corresponding HTML in the inspector.

Navigate to the JS console in the browsers.

Open the JavaScript file and note that there should be a “script running” message logged to the console, but there isn’t just yet - that’s because we haven’t connected the JavaScript file to our HTML file. Find the script tag and add "script.js" to the src attribute so JavaScript file runs. Confirm that you see a message before continuing.

Note that one element has already been selected (using a # to look by ID, just like in CSS) and stored in a constant. Add console.log(button1) and see how most browsers will not only log a lot of information about the selected element, but they will also highlight the corresponding rendered element on the page when you mouse over it in the console.

You can repeat this process with querySelector() to select all four buttons.

Add button1.addEventListener("click", e => {}). This is called a callback function.

Inside the arrow function, add console.log("Button 1 pressed!") and notice that we have our first working button!

Add alert("Meh-eh-eh-eh!") to that first button’s arrow function.

Celebrate! The first button is done!

Add button2.addEventListener("click", e => {}), and add a console.log("Button 2 pressed!"), similar to button1.

Since we’re going to display the results in the status2 paragraph, we’ll need to select that as well. Add const status2 = document.querySelector("#status2") to your script and then a console.log(status2) to confirm that it has been selected.

We want to change the inside of the status2 paragraph, so we’ll do that using the .innerHTML property. This will leave the opening and closing tags intact, but reset the inside to whatever we specify. Add status2.innerHTML = "Thanks for petting the bunny! He looks really happy!" to your arrow function for button 2.

let is a way to initialize variables. Add let carrots = 2 to start off with the correct number.

Capture status3 in a constant with a .querySelector(), and console.log it out to make sure it worked.

Add the event listener for button 3, test that it’s working with a console.log("Button 3 pressed!").

Add carrots = carrots + 1 and describe what that will do, and then immediately add status3.innerHTML = "Coco has had " + carrots + " carrots today!" and think about what will happen here.

Since we’re going to be manipulating a much larger chunk of the page, add const zoo = document.querySelector(".container"). Then add console.log(zoo) to confirm that we’ve done it.

Add the fourth button’s event listener and a console.log statement inside it to confirm that the event is firing.

Add the below line of code to the event listener’s arrow function.

zoo.innerHTML = `<h1 class="title">Due to some dangerous rulebreaking, the petting zoo is temporarily closed</h1>`
