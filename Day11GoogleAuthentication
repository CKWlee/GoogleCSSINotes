###Firebase Realtime Database: Authenticating Google Users and Writing to a Database

##Objectives

You will learn to:

create a Firebase project.
initialize Firebase in project directory.
authenticate users through the Firebase API.
use the Firebase API to write and save new data to a realtime database.

##Instructions

Take some time to navigate through the app (given to you by your instructor) and test out its features. Think about the core functionality of the app and think specifically about what we would need to build to implement this functionality.

Create a new project in the Firebase console and initialize Firebase in your firebaseNotes repository.

In order for Firebase Authentication to work, you will need to enable Google Sign-In in the Firebase console (Authentication > Get Started > Sign-In Method > Enable Google Sign-In). You should run the following commands in your terminal:

$ npm install -g firebase-tools
$ firebase login
$ firebase init
In signIn.js write the shell of a signIn() function. Check that everything is linked together and working by adding a console.log() statement.

Add an onclick() handler to the Sign-In button.

The .auth() method is available to us through the Firebase Authentication library which has been preloaded into the HTML files. GoogleAuthProvider() calls an instance of Google Sign-In Authentication provider. This function carries out the logic of actually signing users in.

Once a user has logged in, they should be redirected to a form to create a note. Add this line to the .then() method. It uses the Javascript window object to navigate the user to the writeNote.html page.

window.location = 'writeNote.html';

Add this code to the end of the .catch() method:

  const err = {
    errorCode,
    errorMessage,
    email,
    credential
  }
  console.log(err)

Test your code up to this point by stepping through your program so far. We can do this with the command firebase emulators:start --only hosting.

Copy the preview domain generated by Cloud Shell from your browser. In your preview window, copy the domain up to the first parameter, not including the url scheme (http://) or the backslash at the end of the url. The url that you copy should look something like this 5000-cs-451757879015-default.cs-us-central1-mtyn.cloudshell.dev.

Navigate to your Firebase console (console.firebase.google.com). From there, open the project that you created for this app. On the left-side menu, click the Authentication tab. At the top, click “Sign-In” method. Scroll down, past “Sign-in providers”, to the section labeled “Authorized domains”. Click “Add domain”, and paste the url that you just copied into the field, then click “Add”.

Now we’ll step through adding the logic to write to the database to writeNote.js.

For the optimal user experience, the user state should persist between all of the HTML pages. To do that we can trigger a function as soon as the page loads to see whether or not a user is logged in. Once again we’ll use the window object. We can call the .onload() event to trigger some functionality as soon as the page loads:


window.onload = event => {

}

The .onAuthStateChanged() method observes whether or not a user is signed in: if so, it makes the data for that user available to us, if not we can redirect that user back to the sign in page to log in. We are defining googleUser here, but want to make it global so that we can call it from another function that we’ll write later on. For this reason, declare the googleUser variable by adding this code to the very top of your script file:

firebase.auth().onAuthStateChanged(function(user) {
if (user) {
console.log('Logged in as: ' + user.displayName);
googleUser = user;
} else {
window.location = 'index.html'; // If not logged in, navigate back to login page.
}
});

It’s now time to write the logic to create a new note and save it to the database. Explore documentation to see if you can figure how to write to realtime databases.

Write the shell of the function that will handle submitting a new note and persist this data to our realtime database. Don’t forget to add the click handler!


const handleNoteSubmit = () => {

}

Capture the form data. We’ll use query selectors to select the input fields in our form.

Format the data and write it to our database. In order to write to our database, we need to reference the endpoint where it will be stored.

Clear the form so that we can write a new note.

