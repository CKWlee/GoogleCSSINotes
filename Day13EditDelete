###Firebase Realtime Database: Editing and Deleting Data

##Objectives

You will learn to:

use the Firebase API to edit and delete data from your realtime database.
use the DOM to dynamically activate a modal.

##Instructions

In viewNotes.js, update the createCard() function to accept both a note and the noteID.

Add a footer to the cards that has a delete button with an event handler.


`<footer class="card-footer">
  <a id="${noteId}" href="#" class="card-footer-item"
     onclick="deleteNote('${noteId}')">
     Delete
  </a>
</footer>`

Write the shell of the function to delete a note.

const deleteNote = (noteId) => {

}

Deleting a note in Firebase RTDB is simple. Just reference that record in the database and call .remove() on it. Add this code inside the deleteNote() function:

firebase.database().ref(`users/${googleUserId}/${noteId}`).remove();

To update a note, add an edit button to the card footer and add an onclick handler, much like the delete button.

`<a id="${noteId}" class="card-footer-item" onclick="editNote('${noteId}')">
  Edit
 </a>`
 
Add an editNote() function:

const editNote = (noteId) => {
  console.log(noteId);
}

In viewNotes.html create a modal with a form:

<div id="editNoteModal" class="modal">
  <div class="modal-background"></div>
  <div class="modal-card">
    <section class="modal-card-body">
      <input class="input is-normal" id="editTitleInput" type="text">
      <input class="input is-normal" id="editTextInput" type="text">
    </section>
    <footer class="modal-card-foot">
      <button class="button is-success" onclick="saveEditedNote()">
        Save changes
      </button>
      <button class="button" onclick="closeEditModal()">Cancel</button>
    </footer>
  </div>
</div>

For an optimal user experience, it’s a good idea to have the text populate the form so that users can easily make their edits. Write out the logic to toggle modal open and populate with note content.

const editNote = (noteId) => {
  const editNoteModal = document.querySelector('#editNoteModal');
  const notesRef = firebase.database().ref(`users/${googleUserId}`);
  notesRef.on('value', (snapshot) => {
    const data = snapshot.val();
    const noteDetails = data[noteId];
    document.querySelector('#editTitleInput').value = noteDetails.title;
    document.querySelector('#editTextInput').value = noteDetails.text;

  });
  editNoteModal.classList.toggle('is-active');
};

Add functionality to push edits to the realtime database. Add code to dynamically handle clicking the Save Changes button on the modal.

  const saveEditBtn = document.querySelector('#saveEdit');
  saveEditBtn.onclick = handleSaveEdit.bind(this, noteId);
  
Start implementing the logic to persist the edit to the database.

After submitting edits we’ll want to close the modal.

const closeEditModal = () => {
  const editNoteModal = document.querySelector('#editNoteModal');
  editNoteModal.classList.toggle('is-active');
};
